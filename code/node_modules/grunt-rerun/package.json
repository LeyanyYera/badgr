{
  "_args": [
    [
      "grunt-rerun@0.0.4",
      "/var/www/html/badgr/code"
    ]
  ],
  "_from": "grunt-rerun@0.0.4",
  "_id": "grunt-rerun@0.0.4",
  "_inCache": true,
  "_installable": true,
  "_location": "/grunt-rerun",
  "_npmUser": {
    "email": "artoale@gmail.com",
    "name": "artoale"
  },
  "_npmVersion": "1.2.11",
  "_phantomChildren": {},
  "_requested": {
    "name": "grunt-rerun",
    "raw": "grunt-rerun@0.0.4",
    "rawSpec": "0.0.4",
    "scope": null,
    "spec": "0.0.4",
    "type": "version"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/grunt-rerun/-/grunt-rerun-0.0.4.tgz",
  "_shasum": "f7a76b2d73c4733d582541c0f5d0cec56957edc4",
  "_shrinkwrap": null,
  "_spec": "grunt-rerun@0.0.4",
  "_where": "/var/www/html/badgr/code",
  "author": {
    "email": "artoale@gmail.com",
    "name": "Alessandro Artoni",
    "url": "https://plus.google.com/117495923729339939592"
  },
  "bugs": {
    "url": "https://github.com/ArtoAle/grunt-rerun/issues"
  },
  "dependencies": {
    "colors": "~0.6.0-1",
    "di": "git://github.com/vojtajina/node-di.git"
  },
  "description": "Launch, relaunch and stop grunt task.",
  "devDependencies": {
    "grunt": "~0.4.0",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-connect": "~0.1.2",
    "grunt-contrib-jshint": "~0.1.1",
    "grunt-contrib-nodeunit": "~0.1.2",
    "grunt-contrib-watch": "~0.2.0",
    "istanbul": "~0.1.32"
  },
  "directories": {},
  "dist": {
    "shasum": "f7a76b2d73c4733d582541c0f5d0cec56957edc4",
    "tarball": "https://registry.npmjs.org/grunt-rerun/-/grunt-rerun-0.0.4.tgz"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "homepage": "https://github.com/ArtoAle/grunt-rerun",
  "keywords": [
    "gruntplugin"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/ArtoAle/grunt-rerun/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "maintainers": [
    {
      "name": "artoale",
      "email": "artoale@gmail.com"
    }
  ],
  "name": "grunt-rerun",
  "optionalDependencies": {},
  "peerDependencies": {
    "grunt": "~0.4.0"
  },
  "readme": "# grunt-rerun [![Build Status](https://travis-ci.org/ArtoAle/grunt-rerun.png)](https://travis-ci.org/ArtoAle/grunt-rerun)\n\n> Launch, relaunch and stop grunt task.\n\n## Getting Started\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-rerun --save-dev\n```\n\nOne the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-rerun');\n```\n\n## The \"rerun\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `rerun` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  rerun: {\n      yourtarget: {\n        options: {\n          tasks: ['express'],\n          keepalive: false,\n          port: 12456\n        },\n      },\n    },\n})\n```\n\n### Options\n\n#### options.task\nType: `Array`\nDefault value: []\n\nAn array of grunt task to be 're-run'. Those should be long-living grunt task (like testacular server, express with keepalive and so on)\n\n#### options.keepalive\nType: `Boolean`\nDefault value: `false`\n\nWheter or not the rerun task should block or not. The preferred way is to leave `keepalive` to false and to useit in conjunction\nwith other long-living task like `watch`\n\n#### options.port\nType: `Number`\nDefault value: `1247`\n\nThe default port used for internal communication. The `rerun:target` task will launch a server listening on this port, wich will \nrecive further comunication via the `rerun:target:task:go` task. \n### Usage Examples\n\nIn this example, the default options are used to so keepalive will be `false` and the port used internally will be `1247`. So if the `testing` file has the content `Testing` and the `123` file had the content `1 2 3`, the generated result would be `Testing, 1 2 3.`\n\n```js\ngrunt.initConfig({\n  watch: {\n      dev: {\n        files: ['server/*.js'],\n\n        //Note the :go flag used for sending the reload message to the rerun server\n        tasks: ['clean','rerun:dev:express:go']\n      },\n    },\n    express: {\n        dev: {\n            options: {\n                port: 3000,\n                bases: ['/public'],\n                keepalive: true,\n                server: path.resolve('./server/app.js')\n            }\n        }\n    },\n    // Configuration to be run (and then tested).\n    rerun: {\n      dev: {\n        options: {\n          tasks: ['express']\n        },\n      },\n    }\n})\n```\n\n\n## Contributing\nThe project is in very ealry stage, so any suggestion, pull request and issue are welcomed. \nPlease use github for any communication\n\n## Release History\n_(Nothing yet)_\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/ArtoAle/grunt-rerun.git"
  },
  "scripts": {
    "test": "grunt test"
  },
  "version": "0.0.4"
}
